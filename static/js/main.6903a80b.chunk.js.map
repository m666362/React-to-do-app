{"version":3,"sources":["components/Form.js","components/FilterButton.js","components/Todo.js","App.js","index.js"],"names":["Form","props","useState","name","setName","onSubmit","e","preventDefault","trim","addTask","className","htmlFor","type","id","autoComplete","value","onChange","target","FilterButton","style","backgroundColor","color","aria-pressed","isPressed","onClick","setFilter","Todo","isEditing","setEditing","newName","setNewName","editFieldRef","useRef","editButtonRef","wasEditing","ref","useEffect","current","usePrevious","editingTemplate","editTask","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","focus","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","App","tasks","setTasks","filter","setlastWord","updatedTasks","map","remainingTasks","editedTaskList","taskList","key","filterColors","word","filterList","index","tasksNoun","length","item","headingText","listHeadingRef","prevTaskLength","newTask","nanoid","tabIndex","role","aria-labelledby","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PA4CeA,MA1Cf,SAAcC,GACZ,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAiBA,OACE,0BAAMC,SAfR,SAAsBC,GACpBA,EAAEC,iBACGJ,EAAKK,SAGVP,EAAMQ,QAAQN,GACdC,EAAQ,OAUN,wBAAIM,UAAU,iBACZ,2BAAOC,QAAQ,iBAAiBD,UAAU,aAA1C,wBAKF,2BACEE,KAAK,OACLC,GAAG,iBACHH,UAAU,kBACVP,KAAK,OACLW,aAAa,MACbC,MAAOZ,EACPa,SAnBN,SAAsBV,GACpBF,EAAQE,EAAEW,OAAOF,UAoBf,4BAAQH,KAAK,SAASF,UAAU,4BAAhC,SCnBSQ,MAhBf,SAAsBjB,GACpB,OACE,4BACEW,KAAK,SACLF,UAAU,iBACVS,MAAO,CAAEC,gBAAiBnB,EAAMoB,MAAOA,MAAO,SAC9CC,eAAcrB,EAAMsB,UACpBC,QAAS,kBAAMvB,EAAMwB,UAAUxB,EAAME,QAErC,0BAAMO,UAAU,mBAAhB,SACA,8BAAOT,EAAME,MACb,0BAAMO,UAAU,mBAAhB,YCFS,SAASgB,EAAKzB,GAC3B,MAAgCC,oBAAS,GAAzC,mBAAOyB,EAAP,KAAkBC,EAAlB,KACA,EAA8B1B,mBAAS,IAAvC,mBAAO2B,EAAP,KAAgBC,EAAhB,KAEMC,EAAeC,iBAAO,MACtBC,EAAgBD,iBAAO,MAEvBE,EAfR,SAAqBnB,GACnB,IAAMoB,EAAMH,mBAIZ,OAHAI,qBAAU,WACRD,EAAIE,QAAUtB,KAEToB,EAAIE,QAUQC,CAAYX,GAgB/B,IAAMY,EACJ,0BAAM7B,UAAU,cAAcL,SAXhC,SAAsBC,GACpBA,EAAEC,iBACGsB,EAAQrB,SAGbP,EAAMuC,SAASvC,EAAMY,GAAIgB,GACzBC,EAAW,IACXF,GAAW,MAKT,yBAAKlB,UAAU,cACb,2BAAOA,UAAU,aAAaC,QAASV,EAAMY,IAA7C,gBACgBZ,EAAME,MAEtB,2BACEU,GAAIZ,EAAMY,GACVH,UAAU,YACVE,KAAK,OACLG,MAAOc,GAAW5B,EAAME,KACxBa,SAzBR,SAAsBV,GACpBwB,EAAWxB,EAAEW,OAAOF,QAyBdoB,IAAKJ,KAGT,yBAAKrB,UAAU,aAEb,4BACEE,KAAK,SACLF,UAAU,kBACVc,QAAS,kBAAMI,GAAW,KAH5B,SAME,0BAAMlB,UAAU,mBAAhB,YAA4CT,EAAME,OAEpD,4BAAQS,KAAK,SAASF,UAAU,8BAAhC,OAEE,0BAAMA,UAAU,mBAAhB,gBAAgDT,EAAME,SAMxDsC,EACJ,yBAAK/B,UAAU,eACb,yBAAKA,UAAU,QACX,2BACEG,GAAIZ,EAAMY,GACVD,KAAK,WACL8B,eAAgBzC,EAAM0C,UACtB3B,SAAU,kBAAMf,EAAM2C,oBAAoB3C,EAAMY,OAElD,2BAAOH,UAAU,aAAaC,QAASV,EAAMY,IAC1CZ,EAAME,OAGX,yBAAKO,UAAU,aACf,4BACEE,KAAK,SACLF,UAAU,MACVc,QAAS,kBAAMI,GAAW,IAC1BO,IAAKF,GAJP,QAMS,0BAAMvB,UAAU,mBAAmBT,EAAME,OAEhD,4BACES,KAAK,SACLF,UAAU,kBACVc,QAAS,kBAAMvB,EAAM4C,WAAW5C,EAAMY,MAHxC,UAKS,0BAAMH,UAAU,mBAAmBT,EAAME,SAiB1D,OAVAiC,qBAAU,YACHF,GAAcP,GACjBI,EAAaM,QAAQS,QAEnBZ,IAAeP,GACjBM,EAAcI,QAAQS,UAEvB,CAACZ,EAAYP,IAGT,wBAAIjB,UAAU,QAAQiB,EAAYY,EAAkBE,G,WChG7D,IAAMM,EAAa,CACjBC,IAAK,kBAAM,GACXC,OAAQ,SAAAC,GAAI,OAAKA,EAAKP,WACtBQ,UAAW,SAAAD,GAAI,OAAIA,EAAKP,YAGpBS,EAAeC,OAAOC,KAAKP,GA0HlBQ,MAxHf,SAAatD,GACX,MAA0BC,mBAASD,EAAMuD,OAAzC,mBAAOA,EAAP,KAAcC,EAAd,KACA,EAA4BvD,mBAAS,OAArC,mBAAOwD,EAAP,KAAejC,EAAf,KACA,EAAgCvB,mBAAS,WAAzC,mBAAiByD,GAAjB,WAEA,SAASf,EAAoB/B,GAC3B,IAAM+C,EAAeJ,EAAMK,KAAI,SAAAX,GAE7B,OAAIrC,IAAOqC,EAAKrC,GAGP,2BAAKqC,GAAZ,IAAkBP,WAAYO,EAAKP,YAE9BO,KAETO,EAASG,GAIX,SAASf,EAAWhC,GAClB,IAAMiD,EAAiBN,EAAME,QAAO,SAAAR,GAAI,OAAIrC,IAAOqC,EAAKrC,MACxD4C,EAASK,GAIX,SAAStB,EAAS3B,EAAIgB,GACpB,IAAMkC,EAAiBP,EAAMK,KAAI,SAAAX,GAE/B,OAAIrC,IAAOqC,EAAKrC,GAEP,2BAAKqC,GAAZ,IAAkB/C,KAAM0B,IAEnBqB,KAETO,EAASM,GAGX,IAAMC,EAAWR,EACdE,OAAOX,EAAWW,IAClBG,KAAI,SAAAX,GAAI,OACP,kBAACxB,EAAD,CACEb,GAAIqC,EAAKrC,GACTV,KAAM+C,EAAK/C,KACXwC,UAAWO,EAAKP,UAChBsB,IAAKf,EAAKrC,GACV+B,oBAAqBA,EACrBC,WAAYA,EACZL,SAAUA,OAIV0B,EAAe,CACnB,CACED,IAAK,MACL5C,MAAO,UACP8C,KAAM,WAER,CACEF,IAAK,SACL5C,MAAO,UACP8C,KAAM,aAER,CACEF,IAAK,YACL5C,MAAO,UACP8C,KAAM,cAIJC,EAAahB,EAAaS,KAAI,SAAC1D,EAAMkE,GAAP,OAClC,kBAAC,EAAD,aACEJ,IAAK9D,EACLA,KAAMA,EACNkB,MAAO6C,EAAaG,GAAOhD,MAC3BsC,YAAeO,EAAaG,GAAOF,KACnC5C,UAAWpB,IAASuD,EACpBjC,UAAWA,GANb,cAOekC,OAUXW,EAAYN,EAASO,OAAS,EAAI,QAAU,OAC5CJ,EAAOD,EAAaR,QAAO,SAACc,GAAD,OAASA,EAAKP,KAAOP,KAAQ,GAAGS,KAC3DM,EAAW,UAAMT,EAASO,OAAf,YAAyBD,EAAzB,YAAsCH,GAEjDO,EAAiB1C,iBAAO,MACxB2C,EA5GR,SAAqB5D,GACnB,IAAMoB,EAAMH,mBAIZ,OAHAI,qBAAU,WACRD,EAAIE,QAAUtB,KAEToB,EAAIE,QAuGYC,CAAYkB,EAAMe,QAQzC,OANAnC,qBAAU,WACJoB,EAAMe,OAASI,KAAoB,GACrCD,EAAerC,QAAQS,UAExB,CAACU,EAAMe,OAAQI,IAGhB,yBAAKjE,UAAU,uBACb,kBAAC,EAAD,CAAMD,QArBV,SAAiBN,GACf,IAAMyE,EAAU,CAAE/D,GAAI,QAAUgE,cAAU1E,KAAMA,EAAMwC,WAAW,GACjEc,EAAS,GAAD,mBAAKD,GAAL,CAAYoB,QAoBlB,yBAAKlE,UAAU,qCACZ0D,GAEH,wBAAIvD,GAAG,eAAeiE,SAAS,KAAK3C,IAAKuC,GACtCD,GAEH,wBACEM,KAAK,OACLrE,UAAU,wCACVsE,kBAAgB,gBAEfhB,KC7HTiB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAK3B,MARI,CACX,CAAE3C,GAAI,SAAUV,KAAM,MAAOwC,WAAW,GACxC,CAAE9B,GAAI,SAAUV,KAAM,QAASwC,WAAW,GAC1C,CAAE9B,GAAI,SAAUV,KAAM,SAAUwC,WAAW,OAO3CyC,SAASC,eAAe,W","file":"static/js/main.6903a80b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Form(props) {\r\n  const [name, setName] = useState('');\r\n\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    if (!name.trim()) {\r\n      return;\r\n    }\r\n    props.addTask(name);\r\n    setName(\"\");\r\n  }\r\n\r\n\r\n  function handleChange(e) {\r\n    setName(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <h2 className=\"label-wrapper\">\r\n        <label htmlFor=\"new-todo-input\" className=\"label__lg\">\r\n          Note down your task\r\n        </label>\r\n      </h2>\r\n\r\n      <input\r\n        type=\"text\"\r\n        id=\"new-todo-input\"\r\n        className=\"input input__lg\"\r\n        name=\"text\"\r\n        autoComplete=\"off\"\r\n        value={name}\r\n        onChange={handleChange}\r\n      />\r\n      <button type=\"submit\" className=\"btn btn__primary btn__lg\">\r\n        Add\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nfunction FilterButton(props) {\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className=\"btn toggle-btn\"\r\n      style={{ backgroundColor: props.color, color: 'white' }}\r\n      aria-pressed={props.isPressed}\r\n      onClick={() => props.setFilter(props.name)}\r\n    >\r\n      <span className=\"visually-hidden\">Show </span>\r\n      <span>{props.name}</span>\r\n      <span className=\"visually-hidden\"> tasks</span>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default FilterButton;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\n\r\n\r\nfunction usePrevious(value) {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n}\r\n\r\nexport default function Todo(props) {\r\n  const [isEditing, setEditing] = useState(false);\r\n  const [newName, setNewName] = useState('');\r\n\r\n  const editFieldRef = useRef(null);\r\n  const editButtonRef = useRef(null);\r\n\r\n  const wasEditing = usePrevious(isEditing);\r\n\r\n  function handleChange(e) {\r\n    setNewName(e.target.value);\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    if (!newName.trim()) {\r\n      return;\r\n    }\r\n    props.editTask(props.id, newName);\r\n    setNewName(\"\");\r\n    setEditing(false);\r\n  }\r\n\r\n  const editingTemplate = (\r\n    <form className=\"stack-small\" onSubmit={handleSubmit}>\r\n      <div className=\"form-group\">\r\n        <label className=\"todo-label\" htmlFor={props.id}>\r\n          New name for {props.name}\r\n        </label>\r\n        <input\r\n          id={props.id}\r\n          className=\"todo-text\"\r\n          type=\"text\"\r\n          value={newName || props.name}\r\n          onChange={handleChange}\r\n          ref={editFieldRef}\r\n        />\r\n      </div>\r\n      <div className=\"btn-group\">\r\n\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn todo-cancel\"\r\n          onClick={() => setEditing(false)}\r\n        >\r\n          Cancel\r\n          <span className=\"visually-hidden\">renaming {props.name}</span>\r\n        </button>\r\n        <button type=\"submit\" className=\"btn btn__primary todo-edit\">\r\n          Save\r\n          <span className=\"visually-hidden\">new name for {props.name}</span>\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n\r\n  const viewTemplate = (\r\n    <div className=\"stack-small\">\r\n      <div className=\"c-cb\">\r\n          <input\r\n            id={props.id}\r\n            type=\"checkbox\"\r\n            defaultChecked={props.completed}\r\n            onChange={() => props.toggleTaskCompleted(props.id)}\r\n          />\r\n          <label className=\"todo-label\" htmlFor={props.id}>\r\n            {props.name}\r\n          </label>\r\n        </div>\r\n        <div className=\"btn-group\">\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn\"\r\n          onClick={() => setEditing(true)}\r\n          ref={editButtonRef}\r\n          >\r\n            Edit <span className=\"visually-hidden\">{props.name}</span>\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn__danger\"\r\n            onClick={() => props.deleteTask(props.id)}\r\n          >\r\n            Delete <span className=\"visually-hidden\">{props.name}</span>\r\n          </button>\r\n        </div>\r\n    </div>\r\n  );\r\n\r\n\r\n  useEffect(() => {\r\n    if (!wasEditing && isEditing) {\r\n      editFieldRef.current.focus();\r\n    }\r\n    if (wasEditing && !isEditing) {\r\n      editButtonRef.current.focus();\r\n    }\r\n  }, [wasEditing, isEditing]);\r\n\r\n\r\n  return <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate}</li>;\r\n}\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport Form from \"./components/Form\";\r\nimport FilterButton from \"./components/FilterButton\";\r\nimport Todo from \"./components/Todo\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\n\r\nfunction usePrevious(value) {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n}\r\n\r\nconst FILTER_MAP = {\r\n  All: () => true,\r\n  Active: task => !task.completed,\r\n  Completed: task => task.completed,\r\n};\r\n\r\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\r\n\r\nfunction App(props) {\r\n  const [tasks, setTasks] = useState(props.tasks);\r\n  const [filter, setFilter] = useState('All');\r\n  const [lastWord, setlastWord] = useState(\"Entried\")\r\n\r\n  function toggleTaskCompleted(id) {\r\n    const updatedTasks = tasks.map(task => {\r\n      // if this task has the same ID as the edited task\r\n      if (id === task.id) {\r\n        // use object spread to make a new obkect\r\n        // whose `completed` prop has been inverted\r\n        return { ...task, completed: !task.completed }\r\n      }\r\n      return task;\r\n    });\r\n    setTasks(updatedTasks);\r\n  }\r\n\r\n\r\n  function deleteTask(id) {\r\n    const remainingTasks = tasks.filter(task => id !== task.id);\r\n    setTasks(remainingTasks);\r\n  }\r\n\r\n\r\n  function editTask(id, newName) {\r\n    const editedTaskList = tasks.map(task => {\r\n      // if this task has the same ID as the edited task\r\n      if (id === task.id) {\r\n        //\r\n        return { ...task, name: newName }\r\n      }\r\n      return task;\r\n    });\r\n    setTasks(editedTaskList);\r\n  }\r\n\r\n  const taskList = tasks\r\n    .filter(FILTER_MAP[filter])\r\n    .map(task => (\r\n      <Todo\r\n        id={task.id}\r\n        name={task.name}\r\n        completed={task.completed}\r\n        key={task.id}\r\n        toggleTaskCompleted={toggleTaskCompleted}\r\n        deleteTask={deleteTask}\r\n        editTask={editTask}\r\n      />\r\n    ));\r\n\r\n  const filterColors = [\r\n    {\r\n      key: \"All\",\r\n      color: \"#455A64\",\r\n      word: \"entried\"\r\n    },\r\n    {\r\n      key: \"Active\",\r\n      color: \"#F44336\",\r\n      word: \"remaining\"\r\n    },\r\n    {\r\n      key: \"Completed\",\r\n      color: \"#388E3C\",\r\n      word: \"completed\"\r\n    },\r\n  ]\r\n\r\n  const filterList = FILTER_NAMES.map((name, index) => (\r\n    <FilterButton\r\n      key={name}\r\n      name={name}\r\n      color={filterColors[index].color}\r\n      setlastWord = {filterColors[index].word}\r\n      isPressed={name === filter}\r\n      setFilter={setFilter}\r\n      setlastWord={setlastWord}\r\n    />\r\n  ));\r\n\r\n  function addTask(name) {\r\n    const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\r\n    setTasks([...tasks, newTask]);\r\n  }\r\n\r\n\r\n  const tasksNoun = taskList.length > 1 ? 'tasks' : 'task';\r\n  const word = filterColors.filter((item)=> item.key == filter)[0].word;\r\n  const headingText = `${taskList.length} ${tasksNoun} ${word}`;\r\n\r\n  const listHeadingRef = useRef(null);\r\n  const prevTaskLength = usePrevious(tasks.length);\r\n\r\n  useEffect(() => {\r\n    if (tasks.length - prevTaskLength === -1) {\r\n      listHeadingRef.current.focus();\r\n    }\r\n  }, [tasks.length, prevTaskLength]);\r\n\r\n  return (\r\n    <div className=\"todoapp stack-large\">\r\n      <Form addTask={addTask} />\r\n      <div className=\"filters btn-group stack-exception\">\r\n        {filterList}\r\n      </div>\r\n      <h2 id=\"list-heading\" tabIndex=\"-1\" ref={listHeadingRef}>\r\n        {headingText}\r\n      </h2>\r\n      <ul\r\n        role=\"list\"\r\n        className=\"todo-list stack-large stack-exception\"\r\n        aria-labelledby=\"list-heading\"\r\n      >\r\n        {taskList}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nconst DATA = [\r\n  { id: \"todo-0\", name: \"Eat\", completed: true },\r\n  { id: \"todo-1\", name: \"Sleep\", completed: false },\r\n  { id: \"todo-2\", name: \"Repeat\", completed: false }\r\n];\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App tasks={DATA} />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}